@page "/shop"
@using System.Net
@using BodyRocky.Front.WebApp.Store.Models
@inherits FluxorComponent
@inject IState<LayoutState> LayoutState
@inject IState<CatalogFullState> CatalogState
@inject LayoutDispatcher LayoutDispatcher
@inject CatalogFullDispatcher CatalogDispatcher
@inject NavigationManager NavigationManager

<!-- breadcrumb -->
<UiBreadcrumb Segments="_segments" />
<!-- ./breadcrumb -->

<!-- shop wrapper -->
<div class="container grid grid-cols-4 gap-6 pt-4 pb-16 items-start">
  <!-- sidebar -->
  <div class="col-span-1 bg-white px-4 pb-6 shadow rounded overflow-hidden">
    <div class="divide-y divide-gray-200 space-y-5">
      <div>
        <h3 class="text-xl text-gray-800 mb-3 uppercase font-medium">Categories</h3>
        <div class="space-y-2">
          @if (CatalogState?.Value.Categories != null)
          {
            foreach (CategoryResponse category in CatalogState.Value.Categories)
            {
              <div class="flex items-center" @key="category.CategoryID">
                <input
                  class="text-primary focus:ring-0 rounded-sm cursor-pointer"
                  id="@category.CategoryID"
                  name="category-@category.CategoryID"
                  type="checkbox"
                  checked="@IsCategorySelected(category.CategoryName)"
                  @onclick="@(() => UpdateNavigation(category.CategoryName))"/>
                <label class="text-gray-600 ml-3 cusror-pointer" for="cat-1">
                  @category.CategoryName
                </label>
                <div class="ml-auto text-gray-600 text-sm">
                  (@category.ProductCount)
                </div>
              </div>
            }
          }
        </div>
      </div>

      <div class="pt-4">
        <h3 class="text-xl text-gray-800 mb-3 uppercase font-medium">
          Marques
        </h3>
        <div class="space-y-2">
          <div class="flex items-center">
            <input class="text-primary focus:ring-0 rounded-sm cursor-pointer" id="brand-1" name="brand-1"
                   type="checkbox">
            <label class="text-gray-600 ml-3 cusror-pointer" for="brand-1">Cooking Color</label>
            <div class="ml-auto text-gray-600 text-sm">(15)</div>
          </div>
          <div class="flex items-center">
            <input class="text-primary focus:ring-0 rounded-sm cursor-pointer" id="brand-2" name="brand-2"
                   type="checkbox">
            <label class="text-gray-600 ml-3 cusror-pointer" for="brand-2">Magniflex</label>
            <div class="ml-auto text-gray-600 text-sm">(9)</div>
          </div>
          <div class="flex items-center">
            <input class="text-primary focus:ring-0 rounded-sm cursor-pointer" id="brand-3" name="brand-3"
                   type="checkbox">
            <label class="text-gray-600 ml-3 cusror-pointer" for="brand-3">Ashley</label>
            <div class="ml-auto text-gray-600 text-sm">(21)</div>
          </div>
          <div class="flex items-center">
            <input class="text-primary focus:ring-0 rounded-sm cursor-pointer" id="brand-4" name="brand-4"
                   type="checkbox">
            <label class="text-gray-600 ml-3 cusror-pointer" for="brand-4">M&D</label>
            <div class="ml-auto text-gray-600 text-sm">(10)</div>
          </div>
          <div class="flex items-center">
            <input class="text-primary focus:ring-0 rounded-sm cursor-pointer" id="brand-5" name="brand-5"
                   type="checkbox">
            <label class="text-gray-600 ml-3 cusror-pointer" for="brand-5">Olympic</label>
            <div class="ml-auto text-gray-600 text-sm">(10)</div>
          </div>
        </div>
      </div>

      <div class="pt-4">
        <h3 class="text-xl text-gray-800 mb-3 uppercase font-medium">Price</h3>
        <div class="mt-4 flex items-center">
          <input class="w-full border-gray-300 focus:border-primary rounded focus:ring-0 px-3 py-1 text-gray-600 shadow-sm" id="min" name="min"
                 placeholder="min"
                 type="text">
          <span class="mx-3 text-gray-500">-</span>
          <input class="w-full border-gray-300 focus:border-primary rounded focus:ring-0 px-3 py-1 text-gray-600 shadow-sm" id="max" name="max"
                 placeholder="max"
                 type="text">
        </div>
      </div>

      @* <div class="pt-4"> *@
      @*   <h3 class="text-xl text-gray-800 mb-3 uppercase font-medium">size</h3> *@
      @*   <div class="flex items-center gap-2"> *@
      @*     <div class="size-selector"> *@
      @*       <input class="hidden" id="size-xs" name="size" type="radio"> *@
      @*       <label class="text-xs border border-gray-200 rounded-sm h-6 w-6 flex items-center justify-center cursor-pointer shadow-sm text-gray-600" *@
      @*              for="size-xs">XS</label> *@
      @*     </div> *@
      @*     <div class="size-selector"> *@
      @*       <input class="hidden" id="size-sm" name="size" type="radio"> *@
      @*       <label class="text-xs border border-gray-200 rounded-sm h-6 w-6 flex items-center justify-center cursor-pointer shadow-sm text-gray-600" *@
      @*              for="size-sm">S</label> *@
      @*     </div> *@
      @*     <div class="size-selector"> *@
      @*       <input class="hidden" id="size-m" name="size" type="radio"> *@
      @*       <label class="text-xs border border-gray-200 rounded-sm h-6 w-6 flex items-center justify-center cursor-pointer shadow-sm text-gray-600" *@
      @*              for="size-m">M</label> *@
      @*     </div> *@
      @*     <div class="size-selector"> *@
      @*       <input class="hidden" id="size-l" name="size" type="radio"> *@
      @*       <label class="text-xs border border-gray-200 rounded-sm h-6 w-6 flex items-center justify-center cursor-pointer shadow-sm text-gray-600" *@
      @*              for="size-l">L</label> *@
      @*     </div> *@
      @*     <div class="size-selector"> *@
      @*       <input class="hidden" id="size-xl" name="size" type="radio"> *@
      @*       <label class="text-xs border border-gray-200 rounded-sm h-6 w-6 flex items-center justify-center cursor-pointer shadow-sm text-gray-600" *@
      @*              for="size-xl">XL</label> *@
      @*     </div> *@
      @*   </div> *@
      @* </div> *@
      @* *@
      @* <div class="pt-4"> *@
      @*   <h3 class="text-xl text-gray-800 mb-3 uppercase font-medium">Color</h3> *@
      @*   <div class="flex items-center gap-2"> *@
      @*     <div class="color-selector"> *@
      @*       <input class="hidden" id="red" name="color" type="radio"> *@
      @*       <label class="border border-gray-200 rounded-sm h-6 w-6  cursor-pointer shadow-sm block" *@
      @*              for="red" *@
      @*              style="background-color: #fc3d57;"></label> *@
      @*     </div> *@
      @*     <div class="color-selector"> *@
      @*       <input class="hidden" id="black" name="color" type="radio"> *@
      @*       <label class="border border-gray-200 rounded-sm h-6 w-6  cursor-pointer shadow-sm block" *@
      @*              for="black" *@
      @*              style="background-color: #000;"></label> *@
      @*     </div> *@
      @*     <div class="color-selector"> *@
      @*       <input class="hidden" id="white" name="color" type="radio"> *@
      @*       <label class="border border-gray-200 rounded-sm h-6 w-6  cursor-pointer shadow-sm block" *@
      @*              for="white" *@
      @*              style="background-color: #fff;"></label> *@
      @*     </div> *@
      @* *@
      @*   </div> *@
      @* </div> *@

    </div>
  </div>
  <!-- ./sidebar -->

  <!-- products -->
  <div class="col-span-3">
    <div class="flex items-center mb-4">
      <select class="w-44 text-sm text-gray-600 py-3 px-4 border-gray-300 shadow-sm rounded focus:ring-primary focus:border-primary" id="sort"
              name="sort">
        <option value="">Tri par défaut</option>
        <option value="price-low-to-high">Prix: ascendant</option>
        <option value="price-high-to-low">Prix: descendant</option>
        <option value="latest">Nouveautés</option>
      </select>

      <div class="flex gap-2 ml-auto">
        <button class="@GetCssClassForViewMode(ViewMode.Grid) border w-10 h-9 flex items-center justify-center rounded cursor-pointer"
                @onclick="() => LayoutDispatcher.ChangeViewMode(ViewMode.Grid)">
          <i class="fa-solid fa-grip-vertical"></i>
        </button>
        <button class="@GetCssClassForViewMode(ViewMode.List) border w-10 h-9 flex items-center justify-center rounded cursor-pointer"
                @onclick="() => LayoutDispatcher.ChangeViewMode(ViewMode.List)">
          <i class="fa-solid fa-list"></i>
        </button>
      </div>
    </div>
    
    @if (CatalogState.Value.IsLoading)
    {
      <div class="col-span-3">
        <div class="flex justify-center">
          <div class="spinner"></div>
        </div>
      </div>
    }
    else
    {
      if (CatalogState.Value.Products.Any())
      {
        @if (LayoutState.Value.ViewMode is ViewMode.Grid)
        {
          <div class="grid grid-cols-3 gap-6">
            @foreach (ProductResponse product in CatalogState.Value.Products)
            {
              <UiProductCard @key="product.ProductID" Data="product"/>
            }
          </div>
        }
        else
        {
          <div class="col-span-9 space-y-4">
            @foreach (ProductResponse product in CatalogState.Value.Products)
            {
              <UiProductListItem @key="product.ProductID" Data="product"/>
            }
          </div>
        }
      }
      else
      {
        <div class="col-span-3">
          <div class="flex justify-center">
            <div class="text-gray-600">Aucun produit trouvé</div>
          </div>
        </div>
      }
    }
  </div>
  <!-- ./products -->
</div>
<!-- ./shop wrapper -->

@code {

  private readonly UiBreadcrumb.BreadcrumbSegment[] _segments = {
    new("Boutique", Routes.SHOP_ROUTE),
  };
  
  [Parameter]
  [SupplyParameterFromQuery(Name = "categories")]
  public string[] CategoryNames { get; set; } = {  };

  protected override void OnInitialized()
  {
    base.OnInitialized();
    
    if (!CatalogState.Value.Products.Any())
    {
      CatalogDispatcher.LoadCatalogFull();
    }
  }
  
  private string GetCssClassForViewMode(ViewMode viewMode)
  {
    return LayoutState.Value.ViewMode == viewMode
      ? "border-primary text-white bg-primary" 
      : "border-gray-300 text-gray-600";
  }
  
  private bool IsCategorySelected(string categoryName)
  {
    return CategoryNames
      .Select(WebUtility.UrlDecode)
      .Contains(categoryName);
  }
  
  private void UpdateNavigation(string categoryName)
  {
    // copy the current category names
    var categoryNames = CategoryNames
      .Select(WebUtility.UrlDecode)
      .ToList();
    
    // if the category is already selected, remove it
    if (categoryNames.Contains(categoryName))
    {
      categoryNames.Remove(categoryName);
    }
    
    // otherwise, add it
    else
    {
      categoryNames.Add(categoryName);
    }
    
    // update the query string
    string queryString = string
      .Join("&", categoryNames.Select(x=>"categories=" + x));
    
    // navigate to the new query string
    if (string.IsNullOrWhiteSpace(queryString))
    {
      NavigationManager.NavigateTo(NavigationManager.Uri.Split("?")[0]);
    }
    else
    {
      NavigationManager.NavigateTo(NavigationManager.Uri.Split("?")[0] + "?" + queryString);
    }
  }

}