@inherits TWTransitionalComponentBase

<div class="@_hiddenClass @TransitionClasses.ToString() @AdditionalClasses" @attributes="InputAttributes">
  <CascadingValue Value="this" IsFixed="true">
    @ChildContent
  </CascadingValue>
</div>

@code {

  [Parameter]
  public bool IsOpened { get; set; }

  [Parameter]
  public EventCallback<bool> IsOpenedChanged { get; set; }

  private bool _oldStatus;
  private List<TWTransition> _transitions;

  private bool _isFirstRender = true;

  protected override async Task OnParametersSetAsync()
  {
    if (_oldStatus != IsOpened && !_isFirstRender)
    {
      _oldStatus = IsOpened;
      if (IsOpened)
        SetHiddenClass();
      await ToggleAsync();
    }
    else
      SetHiddenClass();
  }

  protected override void OnInitialized()
  {
    _oldStatus = IsOpened;
    _transitions = new();
  }

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender)
    {
      _isFirstRender = false;
    }
  }

  private string _hiddenClass = "";
  private bool _isTransitional => !string.IsNullOrWhiteSpace(Entering) || !string.IsNullOrWhiteSpace(Leaving);

  public async Task Toggle()
  {
    await InvokeAsync(async () =>
    {
      if (IsOpened)
        await ShowAsync();
      else
        await HideAsync();
    });
  }

  internal async Task ToggleAsync()
  {
    List<Task> tasks = new List<Task>();
    if (_isTransitional)
      tasks.Add(Toggle());
    foreach (TWTransition item in _transitions)
    {
      tasks.Add(item.Toggle());
    }
  //Console.WriteLine(tasks.Count());
  // Run all the tasks
    await Task.WhenAll(tasks);

    await IsOpenedChanged.InvokeAsync(IsOpened);

    SetHiddenClass();
  }

  internal void AddTransition(TWTransition transition)
  {
    _transitions.Add(transition);
  }

  private void SetHiddenClass()
  {
    _hiddenClass = IsOpened ? "" : "hidden";
    StateHasChanged();
  }
  } 